generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String            @id @default(cuid())
  name          String?
  email         String            @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  barbershops   BarbershopUser[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String            @unique
  userId       String
  expires      DateTime
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Barbershop {
  id          String              @id @default(uuid())
  name        String
  address     String
  phones      String[]
  description String
  imageUrl    String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  services    BarbershopService[]
  ratings     Rating[]
  users       BarbershopUser[]
  bookings    Booking[]
  availabilities BarbershopAvailability[]
  hasDefaultHours Boolean         @default(false)
  barbers      Barber[]
}

model BarbershopUser {
  id           String             @id @default(uuid())
  userId       String
  barbershopId String
  user         User               @relation(fields: [userId], references: [id])
  barbershop   Barbershop         @relation(fields: [barbershopId], references: [id])

  @@unique([userId, barbershopId])
}

model BarbershopService {
  id           String             @id @default(uuid())
  name         String
  description  String
  imageUrl     String
  price        Decimal            @db.Decimal(10, 2)
  barbershopId String
  barbershop   Barbershop         @relation(fields: [barbershopId], references: [id])
  bookings     Booking[]
  ratings      Rating[]
}

model Booking {
  id            String            @id @default(uuid())
  userId        String
  user          User              @relation(fields: [userId], references: [id])
  serviceId     String
  service       BarbershopService @relation(fields: [serviceId], references: [id])
  barbershopId  String
  barbershop    Barbershop        @relation(fields: [barbershopId], references: [id])
  date          DateTime
  barberId      String
  barber        Barber            @relation(fields: [barberId], references: [id])
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model Rating {
  id                Int               @id @default(autoincrement())
  barbershop        Barbershop        @relation(fields: [barbershopId], references: [id])
  barbershopId      String
  barbershopService BarbershopService @relation(fields: [serviceId], references: [id])
  serviceId         String
  rating            Int               // 1 to 5
  message           String?
  userName          String
  userAvatar        String?
  barberId          String?
  barber            Barber?           @relation(fields: [barberId], references: [id])
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model BarbershopAvailability {
  id           String                 @id @default(uuid())
  barbershopId String
  barbershop   Barbershop             @relation(fields: [barbershopId], references: [id])
  dayOfWeek    Int        
  time         String     

  @@unique([barbershopId, dayOfWeek, time])
}

model Barber {
  id           String                 @id @default(uuid())
  name         String
  description  String?
  imageUrl     String?
  barbershopId String
  barbershop   Barbershop             @relation(fields: [barbershopId], references: [id])
  bookings     Booking[]
  ratings      Rating[]
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
}
